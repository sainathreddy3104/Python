2) PROBLEM 2-INVENTORY MANAGEMENT SYSTEM OPTIMIZATION
SCENARIO-
I have been asked by a retail company to optimize their inventory management system. The company wants to minimize stockouts and overstock situations while maximizing inventory turnover and profitability.
Tasks:
Model the inventory system: Define the structure of the inventory system, including products, warehouses, and current stock levels.
Implement an inventory tracking application: Develop a Python application that tracks inventory levels in real-time and alerts when stock levels fall below a certain threshold.
Optimize inventory ordering: Implement algorithms to calculate optimal reorder points and quantities based on historical sales data, lead times, and demand forecasts.
Generate reports: Provide reports on inventory turnover rates, stockout occurrences, and cost implications of overstock situations.
User interaction: Allow users to input product IDs or names to view current stock levels, reorder recommendations, and historical data.
Deliverables:
Data Flow Diagram: Illustrate how data flows within the inventory management system, from input (e.g., sales data, inventory adjustments) to output (e.g., reorder alerts, reports).
Pseudocode and Implementation: Provide pseudocode and actual code demonstrating
how inventory levels are tracked, reorder points are calculated, and reports are
generated.
Documentation: Explain the algorithms used for reorder optimization, how historical data influences decisions, and any assumptions made (e.g., constant lead times).
User Interface: Develop a user-friendly interface for accessing inventory information, viewing reports, and receiving alerts.
Assumptions and Improvements: Discuss assumptions about demand patterns, supplier reliability, and potential improvements for the inventory management system's

DATA FLOW DIAGRAM:-

User Input (Product ID/Name, Sales Data, Inventory Adjustments) -> Inventory Tracking Application -> Reorder Calculation Algorithm
                 ^                                                                              |
                 |                                                                              v
           Alert on Low Stock
                                                        Generate Reports (Inventory Turnover, Stockouts, Cost Implications)

INVENTORY TRACKING APPLICATION:-
class Product:
    def _init_(self, product_id, name, initial_stock, reorder_point, reorder_quantity):
        self.product_id = product_id
        self.name = name
        self.stock = initial_stock
        self.reorder_point = reorder_point
        self.reorder_quantity = reorder_quantity

    def update_stock(self, adjustment):
        self.stock += adjustment

class InventoryManagementSystem:
    def _init_(self):
        self.products = {}

    def add_product(self, product_id, name, initial_stock, reorder_point, reorder_quantity):
        if product_id not in self.products:
            self.products[product_id] = Product(product_id, name, initial_stock, reorder_point, reorder_quantity)
        else:
            print(f"Product with ID {product_id} already exists.")

    def track_inventory(self, product_id, adjustment):
        if product_id in self.products:
            self.products[product_id].update_stock(adjustment)
            if self.products[product_id].stock < self.products[product_id].reorder_point:
                self.generate_reorder_alert(product_id)
        else:
            print(f"Product with ID {product_id} does not exist.")

    def generate_reorder_alert(self, product_id):
        print(f"Alert: Product {self.products[product_id].name} is below reorder point. Current stock: {self.products[product_id].stock}")

    def get_product_stock(self, product_id):
        if product_id in self.products:
            retâ€¦Read more
10:55 AM
Forwarded
4)Problem 4: Real-Time COVID-19 Statistics Tracker
Scenario:
I am developing a real-time COVID-19 statistics tracking application for a healthcare organization. The application should provide up-to-date information on COVID-19 cases, recoveries, and deaths for a specified region.
Tasks:
Model the data flow for fetching COVID-19 statistics from an external API and displaying it to the user.
Implement a Python application that integrates with a COVID-19 statistics API (e.g., disease.sh) to fetch real-time data.
Display the current number of cases, recoveries, and deaths for a specified region.
Allow users to input a region (country, state, or city) and display the corresponding COVID-19 statistics.
Deliverables:
Data flow diagram illustrating the interaction between the application and the API.
Pseudocode and implementation of the COVID-19 statistics tracking application.
Documentation of the API integration and the methods used to fetch and display COVID- 19 data.
Explanation of any assumptions made and potential improvements.

DATA FLOW DIAGRAM:-

User Input (Region) -> Python Application -> COVID-19 Statistics API (e.g., disease.sh)
                ^                                            |
                |                                            v
        Display COVID-19 Statistics <- JSON Response <- API Request

COVIS-19 STATISTICS TRACKING APPLICATION:-

import requests

class Covid19StatisticsTracker:
    def init(self):
        self.base_url = 'https://disease.sh/v3/covid-19'

    def fetch_covid_stats(self, region):
        endpoint = f'/countries/{region}' if region else '/all'
        url = self.base_url + endpoint

        try:
            response = requests.get(url)
            data = response.json()

            if response.status_code == 200:
                return data  # Return JSON data received from API
            else:
                print(f"Error fetching data: {data['message']}")
                return None

        except requests.exceptions.RequestException as e:
            print(f"Error fetching data: {e}")
            return None

    def display_covid_stats(self, data):
        if data:
            # Extract relevant COVID-19 statistics
            cases = data.get('cases', 'N/A')
            deaths = data.get('deaths', 'N/A')
            recovered = data.get('recovered', 'N/A')
            active = data.get('active', 'N/A')

            # Displaying COVID-19 statistics
            print(f"COVID-19 Statistics:")
            print(f"Total Cases: {cases}")
            print(f"Total Deaths: {deaths}")
            print(f"Total Recovered: {recovered}")
            print(f"Active Cases: {active}")
        else:
            print("No COVID-19 data available for the specified region.")

# Example usage:
if name == "main":
    tracker = Covid19StatisticsTracker()
    region = input("Enter country name (leave blank for global stats): ")
    covid_data = tracker.fetch_covid_stats(region)
    tracker.display_covid_stats(covid_data)

Documentation
API Integration and Methods
API Integration:

The application integrates with the disease.sh COVID-19 API to fetch real-time statistics.
Constructs the API request dynamically based on user input (country name) to fetch statistics for a specific region or global statistics.
Fetch COVID-19 Statistics (fetch_covid_stats method):

Sends an HTTP GET request to the appropriate endpoint (/all for global stats or /countries/{country} for country-specific stats).
Handles JSON response to extract COVID-19 statistics including total cases, deaths, recoveries, and active cases.
Display COVID-19 Statistics (display_covid_stats method):

Parses JSON response to extract and display relevant COVID-19 statistics.
Handles cases where no data is available for the specified region.
Assumptions
Data Availability: Assumes real-time availability and updates from the disease.sh API.
Region Input: Users input country names primarily; can be extended to handle state or city names based on API capabilities.
API Reliability: Assumes the disease.sh API is reliable and returns accurate data.
Potential Improvements
Historical Data: Incorporate historical COVID-19 data for trend analysis and visualization.
Visualization: Develop graphical charts and maps to visualize COVID-19 statistics for easier interpretation.
Notifications: Implement notifications or alerts for significant changes in COVID-19 statistics.
Localized Data: Enhance support for retrieving and displaying regional data (e.g., state-level data within a country).
By implementing these improvements, the COVID-19 statistics tracking application can provide more comprehensive insights and support for decision-making within healthcare organizations and public health agencies.
